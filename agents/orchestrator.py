"""
Agent Orchestrator implementation using LangGraph.
Manages communication and coordination between specialized agents.
"""

import logging
from typing import Dict, Any, List, TypeVar, Annotated
from datetime import datetime
from langgraph.graph import Graph
from langgraph.prebuilt import create_react_agent
from langchain_openai import ChatOpenAI
from .primary_counselor import PrimaryCounselorAgent
from .strategic_planning import StrategicPlanningAgent
from .base import AgentError
import json

logger = logging.getLogger(__name__)

# Define state type for graph
StateType = Dict[str, Any]

class AgentMessage:
    """Message format for inter-agent communication"""
    def __init__(self, sender: str, content: Dict[str, Any], metadata: Dict[str, Any] = None):
        self.sender = sender
        self.content = content
        self.metadata = metadata or {}
        self.timestamp = datetime.now()

    def to_dict(self) -> Dict[str, Any]:
        return {
            "sender": self.sender,
            "content": self.content,
            "metadata": self.metadata,
            "timestamp": self.timestamp.isoformat()
        }

class AgentOrchestrator:
    """Manages the multi-agent system using LangGraph"""

    def __init__(self):
        # Initialize OpenAI model
        self.model = ChatOpenAI(model="gpt-4")

        # Initialize agents
        self.agents = {
            "counselor": PrimaryCounselorAgent(),
            "strategic": StrategicPlanningAgent(),
        }

        # Create agent tools
        self.tools = [
            self.agents["counselor"].get_response,
            self.agents["strategic"].get_response
        ]

        # Initialize LangGraph with React Agent
        self.graph = create_react_agent(
            self.model,
            tools=self.tools
        )

    async def process_message(self, message: str, user_id: int) -> str:
        """Process a user message through the agent system"""
        try:
            # Get initial context
            context = await self.agents["counselor"].get_context(user_id)

            # Create initial state
            initial_state = {
                "messages": [("user", message)],
                "context": context,
                "user_id": user_id
            }

            # Process through graph
            result = None
            async for s in self.graph.astream(initial_state):
                result = s["messages"][-1]
                if not isinstance(result, tuple):  # Skip agent thought process
                    continue

            if result:
                return result[1]  # Return the response content
            raise AgentError("No response generated by agents")

        except Exception as e:
            logger.error(f"Error in message processing: {str(e)}")
            raise AgentError("Failed to process message through agent system")

    def get_agent_status(self) -> Dict[str, str]:
        """Get status of all agents in the system"""
        return {
            name: "active" for name in self.agents.keys()
        }